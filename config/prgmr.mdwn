We choose an instance with the default Debian Lenny installation.

# Base system

    ssh-keygen -t rsa  # send ~/.ssh/id_rsa.pub to prgmr
    ssh -i ~/.ssh/id_rsa username@stone.prgmr.com  # username, stone: can be something else

We are now in the console menu. Choose 1 to login as root using password 'password'. We start by upgrading to Debian Squeeze.

    passwd
    aptitude
    # go to preferences (ctrl+t)
    # disable automatic installation of recommended packages
    # update
    # upgrade
    sed -i s/lenny/squeeze/g /etc/apt/sources.list
    aptitude dist-upgrade
    # repeat if necessary
    # don't install the new grub!
    aptitude install grub-legacy
    update-grub
    # make sure /boot/grub/menu.lst looks sane
    shutdown -r now
    # hope that the system comes up again
    # login again from the console menu
    aptitude dist-upgrade
    # this extra dist-upgrade run is probably not needed

Now that we have successfully upgraded to Squeeze, we add the first user and disable root.

    adduser martijn
    addgroup admin
    adduser martijn admin
    aptitude install sudo
    echo '%admin ALL=(ALL) ALL' >> /etc/sudoers
    # try to login as 'martijn' (at username.xen.prgmr.com)
    sudo -l
    # if we are ok, logout as root and disable root
    sudo passwd -l root

Configure aptitude.

    echo 'aptitude::Get-Root-Command "sudo:/usr/bin/sudo";' > /etc/apt/apt.conf
    aptitude
    # go to preferences (ctrl+t)
    # disable automatic installation of recommended packages

Install some packages.

    aptitude install emacs bash-completion screen subversion git htop

Get some dot files.

    svn co $SVNURL .home
    ln -s ~martijn/.home/.bashrc
    ln -s ~martijn/.home/.inputrc
    ln -s ~martijn/.home/.emacs
    ln -s ~martijn/.home/.profile
    ln -s ~martijn/.home/.screenrc
    ln -s ~martijn/.home/bin

# Security

Run sshd on another port (well, this is not really security, but to keep our logs human-readable).

    sed -i 's/Port 22/Port 404/' /etc/ssh/sshd_config

Disable root login, disable password logins, and install denyhosts.

We use the very simple iptables frontend ufw.

    aptitude install ufw
    sed -i s/22/404/g /etc/ufw/applications.d/openssh-server
    ufw default deny
    ufw allow OpenSSH
    ufw enable

# nginx

We want newer nginx from testing, so we add the testing repository to our sources and use pinning to set Squeeze as default repository.

    echo 'deb http://ftp.us.debian.org/debian testing main' >> /etc/apt/sources.list
    echo "Package: *
    Pin: release n=squeeze
    Pin-Priority: 900

    Package: *
    Pin: release a=testing
    Pin-Priority: 100" > /etc/apt/preferences

The nginx-light package only exists in testing, so it can be installed just by name.

    aptitude install nginx-light
    sed -i 's/worker_processes 4/worker_processes 1/' /etc/nginx/nginx.conf

Update: actually, we rebuild this package with the ngx\_cache\_purge module included, see the WordPress section below.

Todo: restrictions.conf, virtual hosts with catchall

# PHP

We want php5-fpm which is not in Debian (not even experimental at this moment). We get it from the Dotdeb repository.

    echo "deb http://packages.dotdeb.org squeeze all" >> /etc/apt/sources.list

Update the pinning settings in /etc/apt/preferences to give Dotdeb lowest priority, except for our PHP packages.

    Package: *
    Pin: release n=squeeze
    Pin-Priority: 900

    Package: *
    Pin: release a=testing
    Pin-Priority: 200

    Package: *
    Pin: origin packages.dotdeb.org
    Pin-Priority: 100

    Package: php5-common php5-fpm php5-mysql php5-gd
    Pin: origin packages.dotdeb.org
    Pin-Priority: 900

Now install the packages we need.

    aptitude install php5-common php5-fpm php5-mysql php5-gd

# MySQL

Have a look at /usr/share/doc/mysql-server-5.1/examples for inspiration.

    aptitude install mysql-server mysql-client
    echo skip-innodb >> /etc/mysql/my.cnf  # and edit some memory settings

# Wordpress

Our WordPress setup is summarized as:

* We track WordPress releases using Subversion and keep our own small set of modifications.
* Use nginx as webserver.
* Requests for PHP are passed to php5-fpm using fastcgi.
* The fastcgi forwards are cached by nginx.
* Cached items can be purged by using ngx\_cache\_purge module.
* On post publishing, relevant cached items are purged using Nginx Proxy Cache Purge plugin for WordPress.


Before re-syncing the database with Dreamhost database, upgrade Dreamhost wordpress to same version.

    http://blogs.sitepoint.com/2010/11/19/lightning-fast-wordpress-with-php-fpm-and-nginx/
    http://wordpress.org/support/topic/nginx-php-fpm-php-apc-wordpress-multisite-subdirectory-wp-super-cache
    http://lekkernerden.nl/2011/02/php5-fpm-php5-apc-segfault/
    http://news.ycombinator.com/item?id=2208760
    http://forum.slicehost.com/comments.php?DiscussionID=5099
    http://wiki.nginx.org/Pitfalls
    http://wordpress.org/extend/plugins/nginx-compatibility/
    http://danielmiessler.com/blog/optimizing-wordpress-with-nginx-varnish-w3-total-cache-amazon-s3-and-memcached
    http://wordpress.org/extend/plugins/nginx-proxy-cache-integrator/
    http://wordpress.org/extend/plugins/nginx-proxy-cache-purge/
    http://tonykwon.com/2010/12/nginx-fastcgi_cache-caveat/
    http://forum.linode.com/viewtopic.php?p=34066&sid=5330e9d40f9733381e41accb2ad112e1#34077
    http://www.graq.co.uk/2010/12/super-fast-wordpress-nginx-caching-configuration/
    http://wordpress.org/extend/plugins/nginx-manager/
    http://wordpress.org/extend/plugins/auto-image-resizer/

We mostly follow [these steps](http://codex.wordpress.org/Installing/Updating_WordPress_with_Subversion#Tracking_Stable_Versions).

Todo: mail

Backup WordPress SVN checkout without upload dir:

    rsync -a --exclude wp-content/uploads wordpress/ wordpress-3.0.5

Build nginx-light with ngx_cache_purge module (remember not to do this on the live server):

    aptitude install build-essential devscripts
    aptitude build-dep nginx-light
    apt-get source nginx-light
    cd nginx-0.8.54/debian/modules
    wget http://labs.frickle.com/files/ngx_cache_purge-1.2.tar.gz
    tar -zxvf ngx_cache_purge-1.2.tar.gz
    cd ..
    emacs rules  # add ngx_cache_purge-1.2 to modules
    cd ..
    dch -i  # Call this version 0.8.54-3.prgmr or something
    debuild -us -uc

# Planet

See http://intertwingly.net/code/venus/

    aptitude install python-chardet python-genshi python-html5lib \
      python-htmltmpl python-httplib2 python-librdf python-libxml2 \
      python-libxslt1 python-lxml python-utidylib

Note: [don't install python-beautifulsoup](http://www.jpichon.net/blog/2010/06/installing-planet-venus/).

    git clone https://github.com/rubys/venus.git
    python venus/runtests.py

# Services to migrate from the old system

* Subversion server (via http)
* rosanne.vermaat.name
* vondellaan.vermaat.name
* martijn.vermaat.name
* janny.vermaat.name
* deleesplank.nl
* MySQL server
* wiki.vermaat.name
* martijn.vermaat.name/planet
* martijn.vermaat.name/kiek

# Links

[Tips for setting up Debian](http://book.prgmr.com/mediawiki/index.php/Tips_for_setting_up_Debian)
